{"version":3,"file":"badiDate.min.js","sources":["../src/locale/en.js","../src/badiLocale.js","../src/badiYears.js","../src/badiDate.js"],"sourcesContent":["const month = {\n  1: 'Bahá',\n  2: 'Jalál',\n  3: 'Jamál',\n  4: '‘Aẓamat',\n  5: 'Núr',\n  6: 'Raḥmat',\n  7: 'Kalimát',\n  8: 'Kamál',\n  9: 'Asmá’',\n  10: '‘Izzat',\n  11: 'Ma_sh_íyyat',\n  12: '‘Ilm',\n  13: 'Qudrat',\n  14: 'Qawl',\n  15: 'Masá’il',\n  16: '_Sh_araf',\n  17: 'Sulṭán',\n  18: 'Mulk',\n  19: '‘Alá’',\n  20: 'Ayyám-i-Há'\n};\n\nconst monthL = {\n  1: 'Splendour',\n  2: 'Glory',\n  3: 'Beauty',\n  4: 'Grandeur',\n  5: 'Light',\n  6: 'Mercy',\n  7: 'Words',\n  8: 'Perfection',\n  9: 'Names',\n  10: 'Might',\n  11: 'Will',\n  12: 'Knowledge',\n  13: 'Power',\n  14: 'Speech',\n  15: 'Questions',\n  16: 'Honour',\n  17: 'Sovereignty',\n  18: 'Dominion',\n  19: 'Loftiness',\n  20: 'Ayyám-i-Há'\n};\n\nconst holyDay = {\n  1: 'Naw-Rúz',\n  2: 'First day of Riḍván',\n  3: 'Ninth day of Riḍván',\n  4: 'Twelfth day of Riḍván',\n  5: 'Declaration of the Báb',\n  6: 'Ascension of Bahá’u’lláh',\n  7: 'Martyrdom of the Báb',\n  8: 'Birth of the Báb',\n  9: 'Birth of Bahá’u’lláh',\n  10: 'Day of the Covenant',\n  11: 'Ascension of ‘Abdu’l-Bahá'\n};\n\n// CAREFUL: Numbering corresponds to Badí' week, i.e. 1 is Jalál (-> Saturday)\nconst weekday = {\n  1: 'Jalál',\n  2: 'Jamál',\n  3: 'Kamál',\n  4: 'Fiḍál',\n  5: '‘Idál',\n  6: 'Istijlál',\n  7: 'Istiqlál'\n};\n\nconst weekdayAbbr3 = {\n  1: 'Jal',\n  2: 'Jam',\n  3: 'Kam',\n  4: 'Fiḍ',\n  5: '‘Idá',\n  6: 'Isj',\n  7: 'Isq'\n};\n\nconst weekdayAbbr2 = {\n  1: 'Jl',\n  2: 'Jm',\n  3: 'Ka',\n  4: 'Fi',\n  5: '‘Id',\n  6: 'Ij',\n  7: 'Iq'\n};\n\nconst weekdayL = {\n  1: 'Glory',\n  2: 'Beauty',\n  3: 'Perfection',\n  4: 'Grace',\n  5: 'Justice',\n  6: 'Majesty',\n  7: 'Independence'\n};\n\nconst yearInVahid = {\n  1: 'Alif',\n  2: 'Bá’',\n  3: 'Ab',\n  4: 'Dál',\n  5: 'Báb',\n  6: 'Váv',\n  7: 'Abad',\n  8: 'Jád',\n  9: 'Bahá',\n  10: 'Ḥubb',\n  11: 'Bahháj',\n  12: 'Javáb',\n  13: 'Aḥad',\n  14: 'Vahháb',\n  15: 'Vidád',\n  16: 'Badí‘',\n  17: 'Bahí',\n  18: 'Abhá',\n  19: 'Váḥid'\n};\n\nconst vahid = 'Váḥid';\nconst kulliShay = 'Kull-i-_Sh_ay’';\nconst BE = 'B.E.';\nconst badiCalendar = 'Badí‘ Calendar';\nconst digitUnicodeOffset = '0'.charCodeAt(0);\nconst defaultFormat = 'd MM+ y BE';\n\nexport {month, monthL, holyDay, weekday, weekdayAbbr3, weekdayAbbr2, weekdayL,\n  yearInVahid, vahid, kulliShay, BE, badiCalendar, digitUnicodeOffset,\n  defaultFormat};\n","/* eslint-disable dot-notation, line-comment-position, camelcase, sort-imports */\nimport * as en from './locale/en.js';\nimport * as ar from './locale/ar.js';\nimport * as de from './locale/de.js';\nimport * as es from './locale/es.js';\nimport * as fa from './locale/fa.js';\nimport * as fr from './locale/fr.js';\nimport * as lv from './locale/lv.js';\nimport * as nl from './locale/nl.js';\nimport * as pt from './locale/pt.js';\nimport * as ru from './locale/ru.js';\nimport * as sv from './locale/sv.js';\nimport * as zh from './locale/zh.js';\nimport * as en_us from './locale/en-us.js';\n\nconst badiLocale = {};\nbadiLocale['en'] = en;\nbadiLocale['ar'] = ar;\nbadiLocale['de'] = de;\nbadiLocale['es'] = es;\nbadiLocale['fa'] = fa;\nbadiLocale['fr'] = fr;\nbadiLocale['lv'] = lv;\nbadiLocale['nl'] = nl;\nbadiLocale['pt'] = pt;\nbadiLocale['ru'] = ru;\nbadiLocale['sv'] = sv;\nbadiLocale['zh'] = zh;\nbadiLocale['en-us'] = en_us;\n\n/**\n * Set default language for localization. If the language doesn't exist,\n * nothing is changed.\n * @param {string} language that should be set as default\n */\nconst setDefaultLanguage = function (language) {\n  if (badiLocale[language] === undefined) {\n    // eslint-disable-next-line no-console\n    console.log('Chosen language does not exist. Setting has not been ' +\n      'changed.');\n  } else {\n    badiLocale['default'] = badiLocale[language];\n  }\n};\n\nlet underlineFormat = 'css';\n\n/**\n * Set underline format for locale items that include underlined characters.\n * @param {'css'|'u'|'diacritic'} format that should be used for underlining\n */\nconst setUnderlineFormat = function (format) {\n  if (['css', 'u', 'diacritic'].indexOf(format) > -1) {\n    underlineFormat = format;\n  } else {\n    // eslint-disable-next-line no-console\n    console.log('Invalid underline format. Choose one of ' +\n      '[\"css\", \"u\", \"diacritic\"]. Setting has not been changed.');\n  }\n};\n\nexport {badiLocale, setDefaultLanguage, setUnderlineFormat, underlineFormat};\n","const badiYears = [\n  'l4da', 'k4ci', 'k5c7', 'l4d6', 'l4ce', 'k4c4', 'k5d4', 'l4cb', 'l4c1',\n  'k4cj', 'k5c8', 'l4d7', 'l4cf', 'k4c5', 'k4d5', 'k5ce', 'l4c2', 'k4d2',\n  'k4ca', 'k5da', 'l4ch', 'k4c6', 'k4d6', 'k5cf', 'l4c4', 'k4d4', 'k4cc',\n  'k5c1', 'l4cj', 'k4c8', 'k4d8', 'k5cg', 'l4c5', 'k4d5', 'k4ce', 'k5c3',\n  'l4d2', 'k4ca', 'k4d9', 'k5ci', 'l4c6', 'k4d6', 'k4cf', 'k4c4', 'k5d4',\n  'k4cb', 'k4bj', 'k4cj', 'k5c9', 'k4d8', 'k4cg', 'k4c6', 'k5d6', 'k4cd',\n  'k4c2', 'k4d2', 'k5ca', 'k4d9', 'k4ci', 'k4c7', 'k5d7', 'k4cf', 'k4c4',\n  'k4d4', 'k5cc', 'k4bj', 'k4cj', 'k4c9', 'k5d9', 'k4cg', 'k4c6', 'k4d5',\n  'k5cd', 'k4c2', 'k4d1', 'k4ca', 'k4da', 'j5cj', 'k4c7', 'k4d7', 'k4cf',\n  'j5c4', 'k4d3', 'k4cb', 'k4c1', 'k5d1', 'l4c9', 'l4d9', 'l4ch', 'k5c6',\n  'l4d5', 'l4cd', 'l4c2', 'k5d2', 'l4ca', 'l4da', 'l4cj', 'k5c8', 'l4d7',\n  'l4cf', 'l4c4', 'k5d4', 'l4cb', 'l4c1', 'l4d1', 'k5c9', 'l4d8', 'l4cg',\n  'l4c5', 'k4d5', 'k5ce', 'l4c2', 'l4d2', 'k4cb', 'k5db', 'l4ci', 'l4c7',\n  'k4d7', 'k5cf', 'l4c4', 'l4d4', 'k4cc', 'k5c2', 'l4d1', 'l4c9', 'k4d9',\n  'k5ch', 'l4c5', 'l4d5', 'k4ce', 'k5c3', 'l4d2', 'l4cb', 'k4da', 'k5ci',\n  'l4c6', 'l4d6', 'k4cf', 'k5c5', 'l4d4', 'l4cc', 'k4c1', 'k4d1', 'k5c9',\n  'l4d8', 'k4cg', 'k4c6', 'k5d6', 'l4ce', 'k4c3', 'k4d3', 'k5cb', 'l4da',\n  'k4ci', 'k4c7', 'k5d7', 'l4cf', 'k4c5', 'k4d5', 'k5cd', 'l4c1', 'k4cj',\n  'k4c9', 'k5d9', 'l4cg', 'k4c6', 'k4d6', 'k5ce', 'l4c3', 'k4d2', 'k4ca',\n  'k5bj', 'l4ci', 'k4c7', 'k4d7', 'k4cg', 'k5c5', 'k4d4', 'k4cc', 'k4c1',\n  'k5d1', 'k4c9', 'k4d9', 'k4ch', 'k5c7', 'l4d6', 'l4ce', 'l4c3', 'l5d3',\n  'l4ca', 'l4da', 'l4cj', 'l5c8', 'l4d7', 'l4cg', 'l4c5', 'l5d4', 'l4cb',\n  'l4c1', 'l4d1', 'l5ca', 'l4d9', 'l4ch', 'l4c6', 'l5d6', 'l4cd', 'l4c2',\n  'l4d2', 'l4cb', 'k5c1', 'l4cj', 'l4c8', 'l4d8', 'k5cg', 'l4c4', 'l4d4',\n  'l4cc', 'k5c2', 'l4d1', 'l4ca', 'l4da', 'k5ci', 'l4c6', 'l4d5', 'l4ce',\n  'k5c3', 'l4d2', 'l4cb', 'l4db', 'k5cj', 'l4c8', 'l4d7', 'l4cf', 'k5c5',\n  'l4d4', 'l4cc', 'l4c2', 'k5d2', 'l4c9', 'l4d9', 'l4ch', 'k4c6', 'k5d6',\n  'l4ce', 'l4c3', 'k4d3', 'k5cc', 'l4db', 'l4cj', 'k4c8', 'k5d8', 'l4cf',\n  'l4c4', 'k4d5', 'k5cd', 'l4c2', 'l4d2', 'k4ca', 'k5d9', 'l4cg', 'l4c6',\n  'k4d6', 'k5cf', 'l4c3', 'l4d3', 'k4cb', 'k5bj', 'l4ci', 'l4c7', 'k4d7',\n  'k5cg', 'l4c5', 'l4d5', 'k4cd', 'k4c2', 'k5d2', 'l4c9', 'k4d9', 'k4ch',\n  'k5c7', 'l4d6', 'k4cf', 'k4c4', 'k5d4', 'l4cb', 'l4bj', 'l4cj', 'l5c8',\n  'm4d7', 'l4cg', 'l4c5', 'l5d5', 'm4cc', 'l4c1', 'l4d1', 'l5ca', 'm4d9',\n  'l4ch', 'l4c7', 'l5d7', 'm4ce', 'l4c3', 'l4d3', 'l5cb', 'm4bi', 'l4ci',\n  'l4c8', 'l4d8', 'l5ch', 'l4c5', 'l4d5', 'l4cd', 'l5c2', 'l4d1', 'l4c9',\n  'l4da', 'l5ci', 'l4c7', 'l4d7', 'l4cf', 'l5c4', 'l4d2', 'l4cb', 'l4bj',\n  'l5d1', 'l4c8', 'l4d8', 'l4cg', 'l5c5', 'l4d4', 'l4cc', 'l4c2', 'l5d2',\n  'l4c9', 'l4da', 'l4ci'];\n\nexport {badiYears};\n","import {badiLocale, setDefaultLanguage, setUnderlineFormat,\n  underlineFormat} from './badiLocale.js';\nimport {badiYears} from './badiYears.js';\n\n/**\n * A date in the Badí' calendar.\n */\nclass BadiDate {\n  /**\n   * Accepts a number of different sets of arguments for instantiation: JS Date\n   * object, moment object, ISO 8601 date string, Badí' date string in the\n   * format 'year-month-day' or 'year-holyDayNumber' and array in the format\n   * [year, month, day] or [year, holyDayNumber] where holyDayNumber is a number\n   * between 1 (Naw-Rúz) and 11 (Ascension of 'Abdu'l-Bahá).\n   * @param {(Date|moment|string|Array)} date input date\n   */\n  constructor(date) { // eslint-disable-line complexity\n    this._gregDate = 0;\n    this._badiYear = 0;\n    this._badiMonth = 0;\n    this._badiDate = 0;\n    this._nawRuz = 0;\n    this._ayyamiHaLength = 0;\n    this._yearTB = [];\n    this._holyDay = false;\n    this._valid = true;\n\n    if (date instanceof Date) {\n      this.gregDate = moment.utc(\n        [date.getFullYear(), date.getMonth(), date.getDate(), 12]);\n    } else if (date instanceof moment) {\n      this._gregDate = moment.utc([date.year(), date.month(), date.date(), 12]);\n    } else if (typeof date === 'string') {\n      const dateArray = this._parseBadiDateString(date);\n      if (dateArray) {\n        this._setFromBadiDate(dateArray);\n      // Looks like the input was a Gregorian datestring\n      } else {\n        // Attempt to handle a malformed string which moment complains about but\n        // Date makes a best guess at.\n        const tempDate = new Date(date);\n        this._gregDate = moment.utc([tempDate.getFullYear(),\n          tempDate.getMonth(), tempDate.getDate(), 12]);\n        // Check if it's before 1 BE or after 356 BE (which we can't handle)\n        if (this._notInValidGregRange(this._gregDate)) {\n          this._setInvalid();\n        }\n      }\n    } else if (date.constructor === Array) {\n      if (date.length !== 3 && date.length !== 2) {\n        this._setInvalid();\n      } else {\n        this._setFromBadiDate(date);\n      }\n    }\n    if (this._badiYear === 0) {\n      // We haven't set the Badí' date yet\n      this._setFromGregorianDate();\n    }\n    if (this._valid) {\n      this._setHolyDay();\n    }\n  }\n\n  /**\n   * Formats the output as defined by the given format string\n   * The following tokens are accepted:\n   * d - day of month without leading zeroes\n   * dd - day of month with leading zeroes\n   * D - day of month as 3-letter (+ apostrophes) abbreviation of translit.\n   * DD - full day of month transliteration\n   * DDL - full day of month translation\n   * DD+ - full day of month transliteration (translation)\n   * m, mm, M, MM, MML, MM+ - same as days\n   * ww - day of week, two letter abbreviation (Jl, Jm, Ka, Fi, 'Id, Ij, Iq)\n   * W - day of week, 3 letter abbreviation (Jal, Jam, Kam, Fiḍ, 'Idá, Isj, Isq)\n   * WW - day of week, full name\n   * WWL - day of week, full name translation\n   * yv - year in vahid without leading zeroes\n   * yyv - year in vahid with leading zeroes\n   * YV - year in vahid full transliteration\n   * v - vahid without leading zeroes\n   * vv - vahid with leading zeroes\n   * k - Kull-i-Shay without leading zeroes\n   * kk - Kull-i-Shay with leading zeroes\n   * y - year without leading zeroes\n   * yy - 3 digit year with leading zeroes\n   * BE - localized variant of \"B.E.\"\n   * BC - localized variant of \"Badí' Calendar\"\n   * Va - localized variant of \"Váḥid\"\n   * KiS - localized variant of \"Kull-i-Shay’\"\n   * Anything in between {} will be printed as is.\n   * @param {string} formatString gives the output format (see reference above)\n   * @param {string} language output language (subject to fallbacks)\n   * @returns {string} date formatted according to inputs\n   */\n  format(formatString, language) { /* eslint-disable-line complexity */\n    if (!this.isValid()) {\n      return 'Not a valid date';\n    }\n    const formatTokens = [\n      ['DDL', 'DD+', 'MML', 'MM+', 'WWL', 'yyv', 'KiS'],\n      ['dd', 'DD', 'mm', 'MM', 'ww', 'WW', 'yv', 'YV', 'vv', 'kk', 'yy', 'BE',\n        'BC', 'Va'],\n      ['d', 'D', 'm', 'M', 'W', 'v', 'k', 'y']];\n    if (language === undefined ||\n        typeof badiLocale[language] === 'undefined') {\n      // eslint-disable-next-line dot-notation\n      if (typeof badiLocale['default'] === 'undefined') {\n        language = 'en';\n      } else {\n        language = 'default';\n      }\n    }\n    if (typeof formatString !== 'string') {\n      formatString = this._formatItemFallback(language, 'defaultFormat');\n    }\n    let returnString = '';\n    const length = formatString.length;\n    for (let i = 0; i < length; i++) {\n      // Text wrapped in {} is output as-is. A '{' without a matching '}'\n      // results in invalid input\n      if (formatString[i] === '{' && i < length - 1) {\n        for (let j = i + 1; j <= length; j++) {\n          if (j === length) {\n            return 'Invalid formatting string.';\n          }\n          if (formatString[j] === '}') {\n            i = j;\n            break;\n          }\n          returnString += formatString[j];\n        }\n      } else {\n        const next1 = formatString[i];\n        const next2 = next1 + formatString[i + 1];\n        const next3 = next2 + formatString[i + 2];\n        // First check for match to 3-symbol token, then 2, then 1\n        // (Tokens are not uniquely decodable)\n        if (formatTokens[0].indexOf(next3) > -1) {\n          returnString += this._getFormatItem(next3, language);\n          i += 2;\n        } else if (formatTokens[1].indexOf(next2) > -1) {\n          returnString += this._getFormatItem(next2, language);\n          i += 1;\n        } else if (formatTokens[2].indexOf(next1) > -1) {\n          returnString += this._getFormatItem(next1, language);\n        } else {\n          returnString += next1;\n        }\n      }\n    }\n    return returnString;\n  }\n\n  /**\n   * Perform post-processing for locale items that contain underlined\n   * characters. These are written in locale files as e.g. '_Sh_araf'.\n   * Depending on the setting, designated characters are wrapped in a <u> tag\n   * or a CSS style or have the underline combining diacritic added to them.\n   * @param {string} string the locale item that should be processed\n   * @param {undefined|int} crop whether the item should be cropped at a\n   *                             specific number of characters (excluding\n   *                             diacritical marks and punctuation).\n   * @returns {string} processed string\n   */\n  _postProcessLocaleItem(string, crop = undefined) { /* eslint-disable-line complexity, class-methods-use-this */\n    if (crop && crop < string.length) {\n      let char = 0;\n      let counter = 0;\n      while (counter < crop) {\n        if (!'_’‘'.indexOf(string[char]) > -1) {\n          counter++;\n        }\n        char++;\n      }\n      if ('_’‘'.indexOf(string[char]) > -1) {\n        char++;\n      }\n      string = string.slice(0, char);\n      if (string.split('_').length % 2 === 0) {\n        string += '_';\n      }\n    }\n    const stringComponents = string.split('_');\n    for (let comp = 1; comp < stringComponents.length; comp += 2) {\n      if (underlineFormat === 'css') {\n        stringComponents[comp] = '<span style=\"text-decoration:underline\">' +\n          stringComponents[comp] + '</span>';\n      } else if (underlineFormat === 'diacritic') {\n        let newstring = '';\n        for (let i = 0; i < stringComponents[comp].length; i++) {\n          newstring += stringComponents[comp][i] + '\\u0332';\n        }\n        stringComponents[comp] = newstring;\n      } else if (underlineFormat === 'u') {\n        stringComponents[comp] = '<u>' + stringComponents[comp] + '</u>';\n      }\n    }\n    return stringComponents.join('');\n  }\n\n  /**\n   * Retrieve the appropriate output for a given formatting token and language.\n   * @param {string} token identifying the date component for output\n   * @param {string} language output language\n   * @returns {string} localized output string in desired language (or fallback)\n   */\n  _getFormatItem(token, language) { // eslint-disable-line complexity\n    switch (token) {\n      // Single character tokens\n      case 'd':\n        return this._digitRewrite(this._badiDay, language);\n      case 'D': {\n        return this._postProcessLocaleItem(this._formatItemFallback(\n          language, 'month', this._badiDay), 3);\n      } case 'm':\n        return this._digitRewrite(this._badiMonth, language);\n      case 'M': {\n        return this._postProcessLocaleItem(this._formatItemFallback(\n          language, 'month', this._badiMonth), 3);\n      } case 'W':\n        return this._formatItemFallback(\n          language, 'weekdayAbbbr3', (this._gregDate.isoWeekday() + 1) % 7 + 1);\n      case 'y':\n        return this._digitRewrite(this._badiYear, language);\n      case 'v':\n        return this._digitRewrite(\n          (Math.floor((this._badiYear - 1) / 19) % 19) + 1, language);\n      case 'k':\n        return this._digitRewrite(\n          Math.floor((this._badiYear - 1) / 361) + 1, language);\n      // Two character tokens\n      case 'dd':\n        return this._digitRewrite(\n          ('0' + String(this._badiDay)).slice(-2), language);\n      case 'DD':\n        return this._postProcessLocaleItem(this._formatItemFallback(\n          language, 'month', this._badiDay));\n      case 'mm':\n        return this._digitRewrite(\n          ('0' + String(this._badiMonth)).slice(-2), language);\n      case 'MM':\n        return this._postProcessLocaleItem(this._formatItemFallback(\n          language, 'month', this._badiMonth));\n      case 'ww':\n        return this._formatItemFallback(\n          language, 'weekdayAbbr2', (this._gregDate.isoWeekday() + 1) % 7 + 1);\n      case 'WW':\n        return this._formatItemFallback(\n          language, 'weekday', (this._gregDate.isoWeekday() + 1) % 7 + 1);\n      case 'yy':\n        return this._digitRewrite(\n          ('00' + String(this._badiYear)).slice(-3), language);\n      case 'yv':\n        return this._digitRewrite((this._badiYear - 1) % 19 + 1, language);\n      case 'YV':\n        return this._formatItemFallback(\n          language, 'yearInVahid', (this._badiYear - 1) % 19 + 1);\n      case 'vv':\n        return this._digitRewrite(('0' + String((Math.floor(\n          (this._badiYear - 1) / 19) + 2) % 19 - 1)).slice(-2), language);\n      case 'kk':\n        return this._digitRewrite(('0' + String(Math.floor(\n          (this._badiYear - 1) / 361) + 1)).slice(-2), language);\n      case 'Va':\n        return this._formatItemFallback(language, 'vahid');\n      case 'BE':\n        return this._formatItemFallback(language, 'BE');\n      case 'BC':\n        return this._formatItemFallback(language, 'badiCalendar');\n      // Three character tokens\n      case 'DDL':\n        return this._formatItemFallback(language, 'monthL', this._badiDay);\n      case 'DD+': {\n        const day = this._postProcessLocaleItem(this._formatItemFallback(\n          language, 'month', this._badiDay));\n        const dayL = this._formatItemFallback(\n          language, 'monthL', this._badiDay);\n        if (day === dayL) {\n          return day;\n        }\n        if (badiLocale[language] === badiLocale.fa) {\n          return `<span dir=\"rtl\">${day} (${dayL})</span>`;\n        }\n        return `${day} (${dayL})`;\n      }\n      case 'MML':\n        return this._formatItemFallback(language, 'monthL', this._badiMonth);\n      case 'MM+': {\n        const month = this._postProcessLocaleItem(this._formatItemFallback(\n          language, 'month', this._badiMonth));\n        const monthL = this._formatItemFallback(\n          language, 'monthL', this._badiMonth);\n        if (month === monthL) {\n          return month;\n        }\n        if (badiLocale[language] === badiLocale.fa) {\n          return `<span dir=\"rtl\">${month} (${monthL})</span>`;\n        }\n        return `${month} (${monthL})`;\n      }\n      case 'WWL':\n        return this._formatItemFallback(\n          language, 'weekdayL', (this._gregDate.isoWeekday() + 1) % 7 + 1);\n      case 'yyv':\n        return this._digitRewrite(\n          ('0' + String((this._badiYear - 1) % 19 + 1)).slice(-2), language);\n      case 'KiS':\n        return this._postProcessLocaleItem(this._formatItemFallback(\n          language, 'kulliShay'));\n      default:\n        return '';\n    }\n  }\n\n  /**\n   * For languages that don't use Western Arabic numerals, rewrite digits into\n   * the proper unicode characters.\n   * @param {int|string} number that should be rewritten\n   * @param {string} language code into which the number should be rewritten\n   * @returns {string} string of digits using the correct glyphs.\n   */\n  _digitRewrite(number, language) {\n    number = String(number);\n    const unicodeOffset = this._formatItemFallback(\n      language, 'digitUnicodeOffset') - '0'.charCodeAt(0);\n    if (unicodeOffset === 0) {\n      return number;\n    }\n    const codePoints = [];\n    for (let i = 0; i < number.length; i++) {\n      codePoints.push(number[i].charCodeAt(0) + unicodeOffset);\n    }\n    return String.fromCharCode(...codePoints);\n  }\n\n  /**\n   * Determine the next language in the fallback order:\n   * regional variant -> primary language -> default language -> English\n   * @param {string} languageCode of the language for which fallback is needed\n   * @returns {string} next item in fallback order\n   */\n  _languageFallback(languageCode) {\n    if (languageCode.indexOf('-') > -1) {\n      return languageCode.split('-')[0];\n    // eslint-disable-next-line no-negated-condition\n    } else if (languageCode !== 'default') {\n      return 'default';\n    }\n    return 'en';\n  }\n\n  /**\n   * Retrieve element from localization with fallback\n   * @param {string} language output language (subject to fallbacks)\n   * @param {string} category group of localization elements (e.g. 'holyDay')\n   *                 or label for single items such as 'BE'\n   * @param {int} index of desired item in category, always 1-indexed\n   * @returns {string} localized output string\n   */\n  _formatItemFallback(language, category, index) {\n    if (index === undefined) {\n      while (typeof badiLocale[language] === 'undefined' ||\n             typeof badiLocale[language][category] === 'undefined') {\n        language = this._languageFallback(language);\n      }\n      return badiLocale[language][category];\n    }\n    while (typeof badiLocale[language] === 'undefined' ||\n           typeof badiLocale[language][category] === 'undefined' ||\n           typeof badiLocale[language][category][index] === 'undefined') {\n      language = this._languageFallback(language);\n    }\n    return badiLocale[language][category][index];\n  }\n\n  /**\n   * Check whether a string supplied to the constructor describes a valid Badí'\n   * date, either as year-month-day or year-holyDay and if yes, return an array\n   * of date components.\n   * @param {string} dateString Badí' date in string format\n   * @returns {(array|false)} array consisting of the Badí' date components\n   *                          (either [year, month, day] or\n   *                          [year, holyDayNumber]) or false\n   */\n  _parseBadiDateString(dateString) { // eslint-disable-line complexity\n    const dateComponents = dateString.split('-');\n    // Are all components numerical\n    for (let i = 0; i < dateComponents.length; i++) {\n      if (!(/^\\d+$/.test(dateComponents[i]))) {\n        return false;\n      }\n      dateComponents[i] = parseInt(dateComponents[i], 10);\n    }\n    // If only two numbers are supplied, the second designates a Holy Day and\n    // must be between 1 and 11\n    if (dateComponents.length !== 3) {\n      if (dateComponents.length === 2 && dateComponents[1] > 0 &&\n          dateComponents[1] < 12) {\n        return dateComponents;\n      }\n      return false;\n    }\n    // Are the month and day numbers in sensible ranges?\n    // We call Ayyám-i-Há month 20\n    if (dateComponents[1] > 20 || dateComponents[1] < 1) {\n      return false;\n    }\n    if (dateComponents[2] > 19 || dateComponents[2] < 1) {\n      return false;\n    }\n    return dateComponents;\n  }\n\n  /**\n   * Check whether a moment object is within the valid range of dates.\n   * @param {moment} datetime date to be checked\n   * @returns {bool} whether the provided datetime is within the valid range\n   */\n  _notInValidGregRange(datetime) {\n    return datetime.isBefore(moment.utc('1844-03-21')) ||\n        datetime.isAfter(moment.utc('2351-03-20'));\n  }\n\n  /**\n   * Generate date from input corresponding to a Gregorian date.\n   */\n  _setFromGregorianDate() {\n    if (this._notInValidGregRange(this._gregDate)) {\n      this._setInvalid();\n      return;\n    }\n    const gregYear = this._gregDate.year();\n    if (this._gregDate.isBefore(moment.utc('2015-03-21'))) {\n      // Old implementation for day before Naw-Rúz 172\n      if (this._gregDate.isBefore(gregYear + '-03-21')) {\n        this._nawRuz = moment.utc((gregYear - 1).toString() + '-03-21');\n        this._badiYear = gregYear - 1844;\n      } else {\n        this._nawRuz = moment.utc(gregYear.toString() + '-03-21');\n        this._badiYear = gregYear - 1843;\n      }\n      this._setOldAyyamiHaLength();\n      this._yearTB = [12, 5, 13, 9];\n    } else {\n      // New implementation\n      this._badiYear = gregYear - 1843;\n      this._setBadiYearInfo(true);\n    }\n    // Now need to set Badí' month and date from the gregorian date\n    this._setBadiMonthDay();\n  }\n\n  /**\n   * Set Badí' month and day from Gregorian date\n   */\n  _setBadiMonthDay() {\n    const dayOfBadiYear = this._dayOfYear(this._gregDate);\n    if (dayOfBadiYear < 343) {\n      this._badiMonth = Math.floor((dayOfBadiYear - 1) / 19 + 1);\n      this._badiDay = (dayOfBadiYear - 1) % 19 + 1;\n    } else if (dayOfBadiYear < 343 + this._ayyamiHaLength) {\n      this._badiMonth = 20;\n      this._badiDay = dayOfBadiYear - 342;\n    } else {\n      this._badiMonth = 19;\n      this._badiDay = dayOfBadiYear - (342 + this._ayyamiHaLength);\n    }\n  }\n\n  /**\n   * Generate date from input that supplied the Badí' year and either Badí'\n   * month and day or a Holy Day number.\n   * @param {array} dateArray Badí' date either given in the form\n   *                          [year, month, day] or [year, holyDayNumber]\n   */\n  _setFromBadiDate(dateArray) { // eslint-disable-line complexity\n    this._badiYear = parseInt(dateArray[0], 10);\n    // Are we in the valid range?\n    if (this._badiYear < 1 || this._badiYear > 507) {\n      this._setInvalid();\n      return;\n    } else if (this._badiYear < 172) {\n      // Old implementation for dates before Naw-Rúz 172\n      this._nawRuz = moment.utc([1843 + this._badiYear, 2, 21]);\n      this._setOldAyyamiHaLength();\n      this._yearTB = [12, 5, 13, 9];\n    } else {\n      // New implementation\n      this._setBadiYearInfo();\n    }\n    // If all three components exist, we have a year, month, and day\n    // eslint-disable-next-line no-negated-condition\n    if (typeof dateArray[2] !== 'undefined') {\n      this._badiMonth = parseInt(dateArray[1], 10);\n      this._badiDay = parseInt(dateArray[2], 10);\n      if (this._badiMonth === 20 && this._badiDay > this._ayyamiHaLength) {\n        // If only off by one day, we'll bubble up so that 5th Ayyám-i-Há in a\n        // year with only 4 days of Ayyám-i-Há can be salvaged\n        if (this._badiDay - this._ayyamiHaLength === 1) {\n          this._badiMonth = 19;\n          this._badiDay = 1;\n        } else {\n          this._setInvalid();\n        }\n      }\n    // Otherwise input designated a Holy Day\n    } else {\n      const holyDayNum = parseInt(dateArray[1], 10);\n      switch (holyDayNum) {\n        case 1:\n          // Naw-Rúz\n          this._badiMonth = 1;\n          this._badiDay = 1;\n          break;\n        case 2:\n          // First Day of Ridván\n          this._badiMonth = 2;\n          this._badiDay = 13;\n          break;\n        case 3:\n          // Ninth Day of Ridván\n          this._badiMonth = 3;\n          this._badiDay = 2;\n          break;\n        case 4:\n          // Twelfth Day of Ridván\n          this._badiMonth = 3;\n          this._badiDay = 5;\n          break;\n        case 5:\n          // Declaration of the Báb\n          this._badiMonth = 4;\n          this._badiDay = 8;\n          if (this._badiYear < 172) {\n            // Date was different in old implementation\n            this._badiDay = 7;\n          }\n          break;\n        case 6:\n          // Ascension of Bahá'u'lláh\n          this._badiMonth = 4;\n          this._badiDay = 13;\n          break;\n        case 7:\n          // Martyrdom of the Báb\n          this._badiMonth = 6;\n          this._badiDay = 17;\n          if (this._badiYear < 172) {\n            // Date was different in old implementation\n            this._badiDay = 16;\n          }\n          break;\n        case 8:\n          // Birth of the Báb\n          this._badiMonth = this._yearTB[0];\n          this._badiDay = this._yearTB[1];\n          break;\n        case 9:\n          // Birth of Bahá'u'lláh\n          this._badiMonth = this._yearTB[2];\n          this._badiDay = this._yearTB[3];\n          break;\n        case 10:\n          // Day of the Covenant\n          this._badiMonth = 14;\n          this._badiDay = 4;\n          break;\n        case 11:\n          // Ascension of 'Abdu'l-Bahá\n          this._badiMonth = 14;\n          this._badiDay = 6;\n          break;\n        default:\n          this._setInvalid();\n          return;\n      }\n    }\n    // Finally we set the Gregorian date for this Badí' date\n    const dayOfGregYear = this._nawRuz.diff(\n      moment.utc([this._badiYear + 1843]), 'days') +\n      this._dayOfYear([this._badiYear, this._badiMonth, this._badiDay]);\n    this._gregDate = moment.utc([this._badiYear + 1843]);\n    // Bubbles up to next year if necessary\n    this._gregDate.dayOfYear(dayOfGregYear);\n    this._gregDate.hour(12);\n  }\n\n  /**\n   * Set the length of Ayyám-i-Há for dates before the new implementation.\n   */\n  _setOldAyyamiHaLength() {\n    if (moment([this._nawRuz.year() + 1]).isLeapYear()) {\n      this._ayyamiHaLength = 5;\n    } else {\n      this._ayyamiHaLength = 4;\n    }\n  }\n\n  /**\n   * Set year parameters for the given year.\n   * @param {bool} fromGregDate whether we are generating the date object from\n   *                            a Gregorian date\n   */\n  _setBadiYearInfo(fromGregDate) {\n    let yearData = this._extractBadiYearInfo();\n    if (fromGregDate === true &&\n        this._gregDate.isBefore(moment.utc(yearData.NR))) {\n      this._badiYear -= 1;\n      yearData = this._extractBadiYearInfo();\n    }\n    this._nawRuz = moment.utc(yearData.NR);\n    this._ayyamiHaLength = yearData.aHL;\n    this._yearTB = yearData.TB;\n  }\n\n  /**\n   * Unpack the info for the Badí' year from the base36 encoded version.\n   * @returns {object} Object containing the date of Naw-Rúz, the length of\n   *                   Ayyám-i-Há, and an array containing month, day, month,\n   *                   day of the Twin Holy Days\n   */\n  _extractBadiYearInfo() {\n    let yearData = {};\n    // Check whether data needs to be unpacked or exists in the verbose version\n    if (badiYears[0] === 'l4da') {\n      const components = badiYears[this._badiYear - 172].split('');\n      yearData.NR = String(this._badiYear - 172 + 2015) + '-03-' +\n                    String(parseInt(components[0], 36));\n      yearData.aHL = parseInt(components[1], 36);\n      const TB1 = [parseInt(components[2], 36), parseInt(components[3], 36)];\n      const TB2 = TB1[1] < 19 ? [TB1[0], TB1[1] + 1] : [TB1[0] + 1, 1];\n      yearData.TB = [TB1[0], TB1[1], TB2[0], TB2[1]];\n    } else {\n      yearData = badiYears[this._badiYear];\n    }\n    return yearData;\n  }\n\n  /**\n   * Get the days since Naw-Rúz (NR itself is '1') of the Badí' or Gregorian\n   * date provided.\n   * @param {(array|moment)} date Badí' date in the form [year, month, day]\n   *                         or moment\n   * @returns {int} 1-indexed number of the day in the Badí' year\n   */\n  _dayOfYear(date) {\n    let numDays = 0;\n    if (date.constructor === Array) {\n      // We have a Badí' date\n      if (date[1] < 19) {\n        numDays = 19 * (date[1] - 1) + date[2];\n      } else if (date[1] === 20) {\n        numDays = 342 + date[2];\n      } else if (date[1] === 19) {\n        numDays = 342 + this._ayyamiHaLength + date[2];\n      }\n    } else {\n      numDays = date.diff(this._nawRuz, 'days') + 1;\n    }\n    return numDays;\n  }\n\n  /**\n   * Set the member variables to invalid values.\n   */\n  _setInvalid() {\n    this._gregDate = moment.utc('0000-00-00');\n    this._badiYear = -1;\n    this._badiMonth = -1;\n    this._badiDay = -1;\n    this._ayyamiHaLength = -1;\n    this._nawRuz = moment.utc('0000-00-00');\n    this._valid = false;\n  }\n\n  /**\n   * If the date is a Holy Day, assign it\n   */\n  _setHolyDay() { // eslint-disable-line complexity\n    // First the dates that haven't changed with the new implementation\n    if (this._badiMonth === 1 && this._badiDay === 1) {\n      // Naw-Rúz\n      this._holyDay = 1;\n    } else if (this._badiMonth === 2 && this._badiDay === 13) {\n      // First Day of Ridván\n      this._holyDay = 2;\n    } else if (this._badiMonth === 3 && this._badiDay === 2) {\n      // Ninth Day of Ridván\n      this._holyDay = 3;\n    } else if (this._badiMonth === 3 && this._badiDay === 5) {\n      // Twelfth Day of Ridván\n      this._holyDay = 4;\n    } else if (this._badiMonth === 4 && this._badiDay === 13) {\n      // Ascension of Bahá'u'lláh\n      this._holyDay = 6;\n    } else if (this._badiMonth === 14 && this._badiDay === 4) {\n      // Day of the Covenant\n      this._holyDay = 10;\n    } else if (this._badiMonth === 14 && this._badiDay === 6) {\n      // Ascension of 'Abdu'l-Bahá\n      this._holyDay = 11;\n    }\n    // Twin birthdays are set in the instance at this point regardless of\n    // implementation\n    if (this._badiMonth === this._yearTB[0] &&\n        this._badiDay === this._yearTB[1]) {\n      // Birth of the Báb\n      this._holyDay = 8;\n    } else if (this._badiMonth === this._yearTB[2] &&\n               this._badiDay === this._yearTB[3]) {\n      // Birth of Bahá'u'lláh\n      this._holyDay = 9;\n    }\n    // Finally the two dates that have changed by one day\n    if (this._badiYear < 172) {\n      if (this._badiMonth === 4 && this._badiDay === 7) {\n        // Declaration of the Báb\n        this._holyDay = 5;\n      } else if (this._badiMonth === 6 && this._badiDay === 16) {\n        // Martyrdom of the Báb\n        this._holyDay = 7;\n      }\n    } else if (this._badiMonth === 4 && this._badiDay === 8) {\n      // Declaration of the Báb\n      this._holyDay = 5;\n    } else if (this._badiMonth === 6 && this._badiDay === 17) {\n      // Martyrdom of the Báb\n      this._holyDay = 7;\n    }\n  }\n\n  /**\n   * Get the name of the Holy Day (if any) in the given language (using\n   * localization fallbacks as necessary).\n   * @param {string} language Optional language for the return string\n   *                 (subject to language fallback)\n   * @returns {(string|false)} Name of the Holy Day in the given (or fallback)\n   *                           language, or false.\n   */\n  holyDay(language) {\n    if (!this._holyDay) {\n      return false;\n    }\n    if (language === undefined ||\n        typeof badiLocale[language] === 'undefined') {\n      // eslint-disable-next-line dot-notation\n      if (typeof badiLocale['default'] === 'undefined') {\n        language = 'en';\n      } else {\n        language = 'default';\n      }\n    }\n    return this._formatItemFallback(language, 'holyDay', this._holyDay);\n  }\n\n  /**\n   * Check whether this is a valid date (i.e. created from valid input).\n   * @returns {bool} whether this is a valid date.\n   */\n  isValid() {\n    return this._valid;\n  }\n\n  /**\n   * Get the Badí' day as a number.\n   * @returns {int} number of the day in the Badí' month (between 1 and 19)\n   */\n  badiDay() {\n    return this._badiDay;\n  }\n\n  /**\n   * Get the Badí' month as a number.\n   * @returns {int} number of the Badí' month (between 1 and 20 where 20 is\n   *                Ayyám-i-Há\n   */\n  badiMonth() {\n    return this._badiMonth;\n  }\n\n  /**\n   * Get the Badí' year.\n   * @returns {int} number of the Badí' year.\n   */\n  badiYear() {\n    return this._badiYear;\n  }\n\n  /**\n   * Get number of the Badí' weekday between 1 (Jalál ~> Saturday) and\n   * 7 (Istiqlál ~> Friday).\n   * @returns {int} number of Badí' weekday\n   */\n  badiWeekday() {\n    return (this._gregDate.isoWeekday() + 1) % 7 + 1;\n  }\n\n  /**\n   * Get number of the year in the Váḥid the current date is in.\n   * @returns {int} number of year in Váḥid (between 1 and 19)\n   */\n  yearInVahid() {\n    return (this._badiYear - 1) % 19 + 1;\n  }\n\n  /**\n   * Get number of the Váḥid (19 year period) the current date is in.\n   * @returns {int} number of Váḥid (between 1 and 19)\n   */\n  vahid() {\n    return (Math.floor((this._badiYear - 1) / 19) % 19) + 1;\n  }\n\n  /**\n   * Get number of the Kull-i-Shay' (361 year period) the current date is in.\n   * @returns {int} number of Kull-i-Shay' (1 for most supported dates)\n   */\n  kullIShay() {\n    return Math.floor((this._badiYear - 1) / 361) + 1;\n  }\n\n  /**\n   * Get the Gregorian date on whose sunset the Badí' date ends.\n   * @returns {moment} Gregorian date, with time set to 12:00:00\n   */\n  gregorianDate() {\n    return this._gregDate;\n  }\n\n  /**\n   * Get the length of Ayyám-i-Há for the year this date is in.\n   * @returns {int} Number of days of Ayyám-i-Há\n   */\n  ayyamiHaLength() {\n    return this._ayyamiHaLength;\n  }\n\n  /**\n   * Get the number (between 1 and 11) of the Holy Day.\n   * @returns {(int|false)} number of Holy Day or false if none.\n   */\n  holyDayNumber() {\n    return this._holyDay;\n  }\n}\n\n/**\n * Sets option (defaultLanguage) for the\n * module.\n * @param {object} options Options to be set.\n */\nconst badiDateOptions = function (options) {\n  if (typeof options.defaultLanguage === 'string') {\n    setDefaultLanguage(options.defaultLanguage);\n  }\n  if (typeof options.underlineFormat === 'string') {\n    setUnderlineFormat(options.underlineFormat);\n  }\n};\n\nexport {BadiDate, badiDateOptions};\n"],"names":["digitUnicodeOffset","charCodeAt","badiLocale","en","underlineFormat","badiYears","BadiDate","date","_gregDate","_badiYear","_badiMonth","_badiDate","_nawRuz","_ayyamiHaLength","_yearTB","_holyDay","_valid","Date","gregDate","moment","utc","getFullYear","getMonth","getDate","year","month","dateArray","this","_parseBadiDateString","_setFromBadiDate","tempDate","_notInValidGregRange","_setInvalid","constructor","Array","length","_setFromGregorianDate","_setHolyDay","formatString","language","isValid","formatTokens","undefined","_formatItemFallback","returnString","i","j","next1","next2","next3","indexOf","_getFormatItem","string","crop","char","counter","slice","split","stringComponents","comp","newstring","join","token","_digitRewrite","_badiDay","_postProcessLocaleItem","isoWeekday","Math","floor","String","day","dayL","fa","monthL","number","unicodeOffset","codePoints","push","fromCharCode","languageCode","category","index","_languageFallback","dateString","dateComponents","test","parseInt","datetime","isBefore","isAfter","gregYear","toString","_setOldAyyamiHaLength","_setBadiYearInfo","_setBadiMonthDay","dayOfBadiYear","_dayOfYear","dayOfGregYear","diff","dayOfYear","hour","isLeapYear","fromGregDate","yearData","_extractBadiYearInfo","NR","aHL","TB","components","TB1","TB2","numDays","options","format","defaultLanguage","log"],"mappings":";;;;;;mMAAA,IA+HMA,EAAqB,IAAIC,WAAW,6BA9HrC,SACA,UACA,UACA,YACA,QACA,WACA,YACA,UACA,WACC,YACA,iBACA,UACA,YACA,UACA,aACA,cACA,YACA,UACA,WACA,wBAID,cACA,UACA,WACA,aACA,UACA,UACA,UACA,eACA,WACC,WACA,UACA,eACA,WACA,YACA,eACA,YACA,iBACA,cACA,eACA,yBAID,YACA,wBACA,wBACA,0BACA,2BACA,6BACA,yBACA,qBACA,0BACC,yBACA,wCAKD,UACA,UACA,UACA,UACA,UACA,aACA,4BAIA,QACA,QACA,QACA,QACA,SACA,QACA,uBAIA,OACA,OACA,OACA,OACA,QACA,OACA,kBAIA,UACA,WACA,eACA,UACA,YACA,YACA,+BAIA,SACA,QACA,OACA,QACA,QACA,QACA,SACA,QACA,UACC,UACA,YACA,WACA,UACA,YACA,WACA,WACA,UACA,UACA,eAGQ,kBACI,oBACP,oBACU,oDAEC,eCjHhBC,KACNA,EAAA,GAAmBC,EAmBnB,IAUIC,EAAkB,MC7ChBC,GACJ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,4VC/BZC,wBASQC,qBACLC,UAAY,OACZC,UAAY,OACZC,WAAa,OACbC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"}