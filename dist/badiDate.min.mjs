/**
 * @license BadiDate v3.0.0
 * (c) 2018 Jan Greis
 * licensed under MIT
 */
import{DateTime as a,Duration as e}from"luxon";var t=Object.freeze({__proto__:null,month:{1:"Bahá",2:"Jalál",3:"Jamál",4:"‘Aẓamat",5:"Núr",6:"Raḥmat",7:"Kalimát",8:"Kamál",9:"Asmá’",10:"‘Izzat",11:"Ma_sh_íyyat",12:"‘Ilm",13:"Qudrat",14:"Qawl",15:"Masá’il",16:"_Sh_araf",17:"Sulṭán",18:"Mulk",19:"‘Alá’",20:"Ayyám-i-Há"},monthL:{1:"Splendour",2:"Glory",3:"Beauty",4:"Grandeur",5:"Light",6:"Mercy",7:"Words",8:"Perfection",9:"Names",10:"Might",11:"Will",12:"Knowledge",13:"Power",14:"Speech",15:"Questions",16:"Honour",17:"Sovereignty",18:"Dominion",19:"Loftiness",20:"Ayyám-i-Há"},holyDay:{1:"Naw-Rúz",2:"First day of Riḍván",3:"Ninth day of Riḍván",4:"Twelfth day of Riḍván",5:"Declaration of the Báb",6:"Ascension of Bahá’u’lláh",7:"Martyrdom of the Báb",8:"Birth of the Báb",9:"Birth of Bahá’u’lláh",10:"Day of the Covenant",11:"Ascension of ‘Abdu’l-Bahá"},weekday:{1:"Jalál",2:"Jamál",3:"Kamál",4:"Fiḍál",5:"‘Idál",6:"Istijlál",7:"Istiqlál"},weekdayAbbr3:{1:"Jal",2:"Jam",3:"Kam",4:"Fiḍ",5:"‘Idá",6:"Isj",7:"Isq"},weekdayAbbr2:{1:"Jl",2:"Jm",3:"Ka",4:"Fi",5:"‘Id",6:"Ij",7:"Iq"},weekdayL:{1:"Glory",2:"Beauty",3:"Perfection",4:"Grace",5:"Justice",6:"Majesty",7:"Independence"},yearInVahid:{1:"Alif",2:"Bá’",3:"Ab",4:"Dál",5:"Báb",6:"Váv",7:"Abad",8:"Jád",9:"Bahá",10:"Ḥubb",11:"Bahháj",12:"Javáb",13:"Aḥad",14:"Vahháb",15:"Vidád",16:"Badí‘",17:"Bahí",18:"Abhá",19:"Váḥid"},vahid:"Váḥid",kulliShay:"Kull-i-_Sh_ay’",BE:"B.E.",badiCalendar:"Badí‘ Calendar",unicodeCharForZero:"0",defaultFormat:"d MM+ y BE"});const r={en:t,default:t};let i="css";const n=[["DDL","DD+","MML","MM+","WWL","yyv","KiS"],["dd","DD","mm","MM","ww","WW","yv","YV","vv","kk","yy","BE","BC","Va"],["d","D","m","M","W","v","k","y"]],l=(a,e,t)=>{switch(e){case"d":return s(a.day,t);case"D":return d(o(t,"month",a.day),3);case"m":return s(a.month,t);case"M":return d(o(t,"month",a.month),3);case"W":return o(t,"weekdayAbbr3",(a.gregorianDate.weekday+1)%7+1);case"y":return s(a.year,t);case"v":return s(Math.floor((a.year-1)/19)%19+1,t);case"k":return s(Math.floor((a.year-1)/361)+1,t);case"dd":return s(("0"+String(a.day)).slice(-2),t);case"DD":return d(o(t,"month",a.day));case"mm":return s(("0"+String(a.month)).slice(-2),t);case"MM":return d(o(t,"month",a.month));case"ww":return o(t,"weekdayAbbr2",(a.gregorianDate.weekday+1)%7+1);case"WW":return o(t,"weekday",(a.gregorianDate.weekday+1)%7+1);case"yy":return s(("00"+String(a.year)).slice(-3),t);case"yv":return s((a.year-1)%19+1,t);case"YV":return o(t,"yearInVahid",(a.year-1)%19+1);case"vv":return s(("0"+String((Math.floor((a.year-1)/19)+2)%19-1)).slice(-2),t);case"kk":return s(("0"+String(Math.floor((a.year-1)/361)+1)).slice(-2),t);case"Va":return o(t,"vahid");case"BE":return o(t,"BE");case"BC":return o(t,"badiCalendar");case"DDL":return o(t,"monthL",a.day);case"DD+":{const e=d(o(t,"month",a.day)),i=o(t,"monthL",a.day);return e===i?e:r[t]===r.fa?`<span dir="rtl">${e} (${i})</span>`:`${e} (${i})`}case"MML":return o(t,"monthL",a.month);case"MM+":{const e=d(o(t,"month",a.month)),i=o(t,"monthL",a.month);return e===i?e:r[t]===r.fa?`<span dir="rtl">${e} (${i})</span>`:`${e} (${i})`}case"WWL":return o(t,"weekdayL",(a.gregorianDate.weekday+1)%7+1);case"yyv":return s(("0"+String((a.year-1)%19+1)).slice(-2),t);case"KiS":return d(o(t,"kulliShay"));default:return""}},d=(a,e)=>{if(e&&e<a.length){let t=0,r=0;for(;r<e;)"_’‘".includes(a[t])||r++,t++;"_’‘".includes(a[t])&&t++,(a=a.slice(0,t)).split("_").length%2==0&&(a+="_")}const t=a.split("_");for(let a=1;a<t.length;a+=2)t[a]=c(t[a]);return t.join("")},c=a=>{switch(i){case"css":return`<span style="text-decoration:underline">${a}</span>`;case"diacritic":return a.split("").map(a=>a+"̲").join("");case"u":return`<u>${a}</u>`;case"none":return a;default:throw new TypeError("Unexpected underlineFormat")}},s=(a,e)=>{a=String(a);const t=o(e,"unicodeCharForZero").charCodeAt(0)-"0".charCodeAt(0);if(0===t)return a;const r=[...a].map(a=>a.charCodeAt(0)+t);return String.fromCharCode(...r)},o=(a,e,t)=>{var i;if(void 0===t){for(;void 0===r[a][e];)a=h(a);return r[a][e]}for(;void 0===(null===(i=r[a][e])||void 0===i?void 0:i[t]);)a=h(a);return r[a][e][t]},h=a=>a.includes("-")?a.split("-")[0]:"default"!==a?"default":"en",y=["l4da","k4ci","k5c7","l4d6","l4ce","k4c4","k5d4","l4cb","l4c1","k4cj","k5c8","l4d7","l4cf","k4c5","k4d5","k5ce","l4c2","k4d2","k4ca","k5da","l4ch","k4c6","k4d6","k5cf","l4c4","k4d4","k4cc","k5c1","l4cj","k4c8","k4d8","k5cg","l4c5","k4d5","k4ce","k5c3","l4d2","k4ca","k4d9","k5ci","l4c6","k4d6","k4cf","k4c4","k5d4","k4cb","k4bj","k4cj","k5c9","k4d8","k4cg","k4c6","k5d6","k4cd","k4c2","k4d2","k5ca","k4d9","k4ci","k4c7","k5d7","k4cf","k4c4","k4d4","k5cc","k4bj","k4cj","k4c9","k5d9","k4cg","k4c6","k4d5","k5cd","k4c2","k4d1","k4ca","k4da","j5cj","k4c7","k4d7","k4cf","j5c4","k4d3","k4cb","k4c1","k5d1","l4c9","l4d9","l4ch","k5c6","l4d5","l4cd","l4c2","k5d2","l4ca","l4da","l4cj","k5c8","l4d7","l4cf","l4c4","k5d4","l4cb","l4c1","l4d1","k5c9","l4d8","l4cg","l4c5","k4d5","k5ce","l4c2","l4d2","k4cb","k5db","l4ci","l4c7","k4d7","k5cf","l4c4","l4d4","k4cc","k5c2","l4d1","l4c9","k4d9","k5ch","l4c5","l4d5","k4ce","k5c3","l4d2","l4cb","k4da","k5ci","l4c6","l4d6","k4cf","k5c5","l4d4","l4cc","k4c1","k4d1","k5c9","l4d8","k4cg","k4c6","k5d6","l4ce","k4c3","k4d3","k5cb","l4da","k4ci","k4c7","k5d7","l4cf","k4c5","k4d5","k5cd","l4c1","k4cj","k4c9","k5d9","l4cg","k4c6","k4d6","k5ce","l4c3","k4d2","k4ca","k5bj","l4ci","k4c7","k4d7","k4cg","k5c5","k4d4","k4cc","k4c1","k5d1","k4c9","k4d9","k4ch","k5c7","l4d6","l4ce","l4c3","l5d3","l4ca","l4da","l4cj","l5c8","l4d7","l4cg","l4c5","l5d4","l4cb","l4c1","l4d1","l5ca","l4d9","l4ch","l4c6","l5d6","l4cd","l4c2","l4d2","l4cb","k5c1","l4cj","l4c8","l4d8","k5cg","l4c4","l4d4","l4cc","k5c2","l4d1","l4ca","l4da","k5ci","l4c6","l4d5","l4ce","k5c3","l4d2","l4cb","l4db","k5cj","l4c8","l4d7","l4cf","k5c5","l4d4","l4cc","l4c2","k5d2","l4c9","l4d9","l4ch","k4c6","k5d6","l4ce","l4c3","k4d3","k5cc","l4db","l4cj","k4c8","k5d8","l4cf","l4c4","k4d5","k5cd","l4c2","l4d2","k4ca","k5d9","l4cg","l4c6","k4d6","k5cf","l4c3","l4d3","k4cb","k5bj","l4ci","l4c7","k4d7","k5cg","l4c5","l4d5","k4cd","k4c2","k5d2","l4c9","k4d9","k4ch","k5c7","l4d6","k4cf","k4c4","k5d4","l4cb","l4bj","l4cj","l5c8","m4d7","l4cg","l4c5","l5d5","m4cc","l4c1","l4d1","l5ca","m4d9","l4ch","l4c7","l5d7","m4ce","l4c3","l4d3","l5cb","m4bi","l4ci","l4c8","l4d8","l5ch","l4c5","l4d5","l4cd","l5c2","l4d1","l4c9","l4da","l5ci","l4c7","l4d7","l4cf","l5c4","l4d2","l4cb","l4bj","l5d1","l4c8","l4d8","l4cg","l5c5","l4d4","l4cc","l4c2","l5d2","l4c9","l4da","l4ci"];class k{constructor(e){this._holyDay=void 0,this._valid=!0,this._invalidReason=void 0;try{if(e instanceof Date)this._gregorianDate=a.fromObject({year:e.getFullYear(),month:e.getMonth()+1,day:e.getDate(),zone:"UTC"});else if(e instanceof a)this._gregorianDate=a.fromObject({year:e.year,month:e.month,day:e.day,zone:"UTC"});else{if(!this._isYearMonthDay(e)&&!this._isYearHolyDayNumber(e))throw"Unrecognized input format";this._setFromBadiDate(e)}void 0===this._year&&this._setFromGregorianDate(),this._setHolyDay()}catch(a){this._setInvalid(a)}Object.freeze(this)}format(a,e){return((a,e,t)=>{if(!a.isValid)return"Not a valid Badí‘ date";"string"==typeof t&&void 0===r[t]&&t.includes("-")&&(t=t.split("-")[0]),void 0!==t&&void 0!==r[t]||(t="default");let i="";const d=(e=null!=e?e:o(t,"defaultFormat")).length;for(let r=0;r<d;r++)if("{"===e[r]&&r<d-1)for(let a=r+1;a<=d;a++){if(a===d)return"Invalid formatting string.";if("}"===e[a]){r=a;break}i+=e[a]}else{const d=e[r],c=d+e[r+1],s=c+e[r+2];n[0].includes(s)?(i+=l(a,s,t),r+=2):n[1].includes(c)?(i+=l(a,c,t),r+=1):n[2].includes(d)?i+=l(a,d,t):i+=d}return i})(this,a,e)}_isYearMonthDay(a){return"number"==typeof a.year&&"number"==typeof a.month&&"number"==typeof a.day&&void 0===a.holyDayNumber}_isYearHolyDayNumber(a){return"number"==typeof a.year&&void 0===a.month&&void 0===a.day&&"number"==typeof a.holyDayNumber}_notInValidGregorianDateRange(e){const t=a.fromObject({year:1844,month:3,day:21,zone:"UTC"}),r=a.fromObject({year:2351,month:3,day:20,zone:"UTC"});return e<t||e>r}_setFromGregorianDate(){if(this._notInValidGregorianDateRange(this._gregorianDate))throw"Input date outside of valid range (1844-03-21 - 2351-03-20)";const e=this._gregorianDate.year,t=a.fromObject({year:2015,month:3,day:21,zone:"UTC"});if(this._gregorianDate<t){const{month:t,day:r}=this._gregorianDate;t<3||3===t&&r<21?(this._nawRuz=a.fromObject({year:e-1,month:3,day:21,zone:"UTC"}),this._year=e-1844):(this._nawRuz=a.fromObject({year:e,month:3,day:21,zone:"UTC"}),this._year=e-1843),this._setOldAyyamiHaLength(),this._yearTwinBirthdays=[12,5,13,9]}else this._year=e-1843,this._setBadiYearInfo(!0);this._setBadiMonthAndDay()}_setBadiMonthAndDay(){const a=this._dayOfYear(this._gregorianDate);a<343?(this._month=Math.floor((a-1)/19+1),this._day=(a-1)%19+1):a<343+this._ayyamiHaLength?(this._month=20,this._day=a-342):(this._month=19,this._day=a-(342+this._ayyamiHaLength))}_setFromBadiDate(t){if(this._year=t.year,this._year<1||this._year>507)throw"Input date outside of valid range (1 - 507 B.E.)";if(this._year<172?(this._nawRuz=a.fromObject({year:1843+this._year,month:3,day:21,zone:"UTC"}),this._setOldAyyamiHaLength(),this._yearTwinBirthdays=[12,5,13,9]):this._setBadiYearInfo(),this._isYearMonthDay(t)){if(this._month=t.month,this._day=t.day,20===this._month&&this._day>this._ayyamiHaLength){if(this._day-this._ayyamiHaLength!=1)throw"Input numbers do not designate a valid date";this._month=19,this._day=1}if(this._month<1||this._month>20||this._day<1||this.day>19)throw"Input numbers do not designate a valid date"}else{if(t.holyDayNumber<1||t.holyDayNumber>11)throw"Input numbers do not designate a valid Holy Day";this._holyDay=t.holyDayNumber,[this._month,this._day]=this._holyDayMapping()[this._holyDay]}this._gregorianDate=this._nawRuz.plus(e.fromObject({days:this._dayOfYear([this._year,this._month,this._day])-1}))}_setOldAyyamiHaLength(){a.fromObject({year:this._nawRuz.year+1}).isInLeapYear?this._ayyamiHaLength=5:this._ayyamiHaLength=4}_setBadiYearInfo(a=!1){let e=this._extractBadiYearInfo();a&&this._gregorianDate<e.nawRuz&&(this._year-=1,e=this._extractBadiYearInfo()),this._nawRuz=e.nawRuz,this._ayyamiHaLength=e.ayyamiHaLength,this._yearTwinBirthdays=e.twinBirthdays}_extractBadiYearInfo(){let e,t,r;if("l4da"===y[0]){const i=y[this._year-172].split("");e=a.fromObject({year:this._year-172+2015,month:3,day:parseInt(i[0],36),zone:"UTC"}),t=parseInt(i[1],36);const n=[parseInt(i[2],36),parseInt(i[3],36)],l=n[1]<19?[n[0],n[1]+1]:[n[0]+1,1];r=[n[0],n[1],l[0],l[1]]}else({nawRuz:e,ayyamiHaLength:t,twinBirthdays:r}=y[this._year]),e=a.fromISO(e,{zone:"UTC"});return{nawRuz:e,ayyamiHaLength:t,twinBirthdays:r}}_dayOfYear(a){return Array.isArray(a)?a[1]<19?19*(a[1]-1)+a[2]:20===a[1]?342+a[2]:342+this._ayyamiHaLength+a[2]:a.diff(this._nawRuz).as("days")+1}_setInvalid(e){this._gregorianDate=a.invalid("Not a valid Badí‘ date"),this._year=NaN,this._month=NaN,this._day=NaN,this._ayyamiHaLength=NaN,this._nawRuz=a.invalid("Not a valid Badí‘ date"),this._valid=!1,this._invalidReason=e}_setHolyDay(){const a=this._holyDayMapping();this._holyDay=parseInt(Object.keys(a).find(e=>a[e][0]===this._month&&a[e][1]===this._day),10)}_holyDayMapping(){return{1:[1,1],2:[2,13],3:[3,2],4:[3,5],5:[4,this._year<172?7:8],6:[4,13],7:[6,this._year<172?16:17],8:[this._yearTwinBirthdays[0],this._yearTwinBirthdays[1]],9:[this._yearTwinBirthdays[2],this._yearTwinBirthdays[3]],10:[14,4],11:[14,6]}}holyDay(a){return this._holyDay?(void 0!==a&&void 0!==r[a]||(a="default"),o(a,"holyDay",this._holyDay)):""}get isValid(){return this._valid}get invalidReason(){return this._invalidReason}get day(){return this._day}get month(){return this._month}get year(){return this._year}get weekday(){return(this._gregorianDate.weekday+1)%7+1}get yearInVahid(){return(this._year-1)%19+1}get vahid(){return Math.floor((this._year-1)/19)%19+1}get kullIShay(){return Math.floor((this._year-1)/361)+1}get gregorianDate(){return this._gregorianDate}get ayyamiHaLength(){return this._ayyamiHaLength}get holyDayNumber(){return this._holyDay?this._holyDay:void 0}}const u=a=>{var e,t;a.defaultLanguage&&(e=a.defaultLanguage,void 0===r[e]?console.log("Chosen language does not exist. Setting has not been changed."):r.default=r[e]),a.underlineFormat&&(t=a.underlineFormat,["css","u","diacritic","none"].includes(t)?i=t:console.log('Invalid underline format. Choose one of ["css", "u", "diacritic", "none"]. Setting has not been changed.'))};export{k as BadiDate,u as badiDateSettings};
//# sourceMappingURL=badiDate.min.m.js.map
